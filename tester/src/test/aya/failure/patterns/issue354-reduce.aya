open data Nat : Set 0
 | zero
 | suc Nat

def addN (a b : Nat) : Nat
 | zero, a => a
 | a, zero => a
 | suc a, b => suc (addN a b)
 | a, suc b => suc (addN a b)

open data Int : Set
 | pos Nat
 | neg Nat { | n => pos (addN n n) }

def abs (n : Int) : Nat
 | pos (suc n) => suc zero
 | pos zero => suc zero
 | neg n => zero
