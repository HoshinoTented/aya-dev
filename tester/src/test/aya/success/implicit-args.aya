open data Nat : Set 0 | zero | suc Nat
open data Bool : Set 0 | true | false
def not (b : Bool) : Bool
 | true => false
 | false => true
def ifElse {A : Set} (b : Bool) (x y : A) : A
 | true, x, y => x
 | false, x, y => y
open data TermTy : Set | natT | boolT
def termTy (t : TermTy) : Set 0
 | natT => Nat
 | boolT => Bool
open data Term (n : TermTy) : Set 0
 | natT => nat Nat
 | natT => succ (Term natT)
 | boolT => bool Bool
 | boolT => inv (Term boolT)
 | A => case (Term boolT) (Term A) (Term A)
def normalize (t : TermTy) (x : Term t) : termTy t
 | natT, nat n => n
 | natT, succ n => suc (normalize natT n)
 | boolT, bool b => b
 | boolT, inv b => not (normalize boolT b)
 | t, case b x y => ifElse (normalize boolT b) (normalize t x) (normalize t y)
open data List (A : Set 0) : Set 0
 | nil | cons A (List A)
def simple : List Nat => cons zero (cons (suc zero) (nil {_}))
def len {A : Set 0} (xs : List A) : Nat
 | nil => zero
 | cons x xs => suc (len xs)
def map {A B : Set 0} (f : Pi A -> B) (xs : List A) : List B
 | f, nil => nil {_}
 | f, cons x xs => cons (f x) (map f xs)
def filter {A : Set 0} (f : Pi A -> Bool) (xs : List A) : List A
 | f, nil => nil {_}
 | f, cons x xs => ifElse (f x) (cons x (filter f xs)) (filter f xs)
