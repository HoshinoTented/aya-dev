open data Nat : Type | zero | suc Nat

def infixl + (a b : Nat) : Nat => zero
def infixr ^ (a b : Nat) : Nat => zero
def infix  = (a b : Nat) : Nat => zero

def test1 => (suc zero) + (suc (suc zero)) + (suc (suc (suc zero)))
def test2 => (suc zero) ^ (suc (suc zero)) ^ (suc (suc (suc zero)))
def test3 => (suc zero) = (suc (suc zero)) = (suc (suc (suc zero)))
