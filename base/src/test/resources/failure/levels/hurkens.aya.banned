ulevel uu
def Empty : Type (lsuc uu) => Pi (A : Type hh uu) -> A
def neg (A : Type uu) : Type (lsuc (lsuc uu)) => A -> Empty
def P (A : Type uu) : Type (lsuc uu) => A -> Type uu
def U => Pi (X : Type) (f : P (P X) -> X) -> P (P X)
def tau (t : P (P U)) : U => \ X f p => t (\ x => p (f (x X f)))
def sig (s : U) : P (P U) => s U tau
def Delta : P U => \ y => neg (Pi (p : P U) (sig y p) -> p (tau (sig y)))
def Omega : U => tau (\ p => Pi (x : U) (sig x p) -> p x)
def D => Pi (p : P U) (sig Omega p) -> p (tau (sig Omega))
def lem1 (p : P U) (H1 : Pi (x : U) (sig x p) -> p x) : p Omega
  => H1 Omega (\ x => H1 (tau (sig x)))
def lem2 : neg D => lem1 Delta
  (\ x H2 H3 => H3 Delta H2 (\ p => H3 (\ y => p (tau (sig y)))))
