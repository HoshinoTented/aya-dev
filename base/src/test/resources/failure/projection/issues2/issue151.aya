prim I
prim coe
prim intervalInv
def inline ~ => intervalInv
def Path (A : I -> Type) (a : A 0) (b : A 1) : Type => [| i |] A i {| ~ i := a | i := b |}
def Eq (A : Type) (a b : A) : Type => Path (\ i => A) a b
variable A : Type
def infix = {A : Type} => Eq A
def idp {a : A} : a = a => \i => a
open data Nat | zero | suc Nat

struct Monoid : Type
  | op (a b : Nat) : Nat
  | r-id (a : Nat) : Eq (op a zero) a
  | assoc (a b c : Nat) : Eq (op (op a b) c) (op a (op b c))

def l-id (M : Monoid) (a : Nat) : Eq (M.add zero a) a => refl
