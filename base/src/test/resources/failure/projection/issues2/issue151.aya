open import Paths
variable A : Type
open import Arith::Nat::Core

struct Monoid : Type
  | op (a b : Nat) : Nat
  | r-id (a : Nat) : Eq (op a zero) a
  | assoc (a b c : Nat) : Eq (op (op a b) c) (op a (op b c))

def l-id (M : Monoid) (a : Nat) : Eq (M.add zero a) a => refl
