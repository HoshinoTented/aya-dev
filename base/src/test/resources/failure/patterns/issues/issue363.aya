open data Nat : Type
 | zero
 | suc Nat

prim I
prim intervalInv
def inline ~ => intervalInv

open data Int : Type
 | pos Nat
 | neg Nat
 | posneg (i : I) { i := pos 0 | ~ i := neg 0 }

def addN (a b : Nat) : Nat
 | zero, a => a
 | a, zero => a
 | suc a, b => suc (addN a b)
 | a, suc ()
