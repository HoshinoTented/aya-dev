open data Nat : Type 0
 | zero
 | suc Nat

overlap def addN (a b : Nat) : Nat
 | zero, a => a
 | a, zero => a
 | suc a, b => suc (addN a b)
 | a, suc b => suc (addN a b)

prim I

open data Int : Type
 | pos Nat
 | neg Nat
 | posneg (n : Nat) (i : I) { i := pos n }

def abs (n : Int) : Nat
 | pos (suc n) => suc zero
 | pos zero => suc zero
 | neg n => zero
 | posneg n i => zero
