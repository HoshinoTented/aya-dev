open struct Path (A : I -> Type) (a : A 0) (b : A 1) : Type
  | at (i : I) : A i {
    | 0 => a
    | 1 => b
  }
def path {A : I -> Type} (p : Pi (i : I) -> A i)
  => new Path A (p 0) (p 1) { | at i => p i }
def infix = {A : Type} (a b : A) : Type => Path (\ i => A) a b
def idp {A : Type} (a : A) : a = a => path (\ i => a)

def pmap {A B : Type} (f : A -> B) {a b : A} (p : a = b)
  : f a = f b => path (\ i => f (p.at i))

open data Nat : Type 0
  | zero
  | suc Nat

def overlap infix + (n m : Nat) : Nat
  | zero, n => n
  | n, zero => n
  | suc m, n => suc (m + n)
  | m, suc n => suc (m + n)
  tighter =

def +-assoc : Pi (x y z : Nat) -> x + (y + z) = (x + y) + z
  | zero, y, z => idp
  | suc x, y, z => pmap suc (+-assoc x y z)
