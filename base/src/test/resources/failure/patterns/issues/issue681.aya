prim I
prim intervalInv
def inline ~ => intervalInv
prim coe
def Path (A : I -> Type) (a : A 0) (b : A 1) : Type => [| i |] A i {| ~ i := a | i := b |}
def Eq (A : Type) (a b : A) : Type => Path (\ i => A) a b
variable A : Type
def infix = {A : Type} => Eq A
def refl {a : A} : a = a => \i => a

def pmap {A B : Type} (f : A -> B) {a b : A} (p : a = b)
  : f a = f b => \ i => f (p i)

open data Nat : Type 0
  | zero
  | suc Nat

def overlap infix + (n m : Nat) : Nat
  | zero, n => n
  | n, zero => n
  | suc m, n => suc (m + n)
  | m, suc n => suc (m + n)
  tighter =

def +-assoc : Pi (x y z : Nat) -> x + (y + z) = (x + y) + z
  | zero, y, z => idp
  | suc x, y, z => pmap suc (+-assoc x y z)
