prim I
prim left : I
prim right : I
open struct Path (A : I -> Type) (a : A left) (b : A right) : Type
  | at (i : I) : A i {
    | left => a
    | right => b
  }
def path {A : I -> Type} (p : Pi (i : I) -> A i)
  => new Path A (p left) (p right) { | at i => p i }

variable A B : Type
def infix = (a b : A) => Path (\x => A) a b
def idp {a : A} : a = a => path (\x => a)
def funExt (f g : A -> B) (p : forall a -> f a = g a) : f = g
