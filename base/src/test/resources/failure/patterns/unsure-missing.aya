open data Nat | zero | suc Nat
open data Fin+1 (n : Nat) : Type
 | m => fzero
 | suc m => fsuc (Fin+1 m)

def overlap addN (a b : Nat) : Nat
 | zero, a => a
 | a, zero => a
 | suc a, b => suc (addN a b)
 | a, suc b => suc (addN a b)

def finToNat (n : Nat) (att : Fin+1 n) : Nat
 | n, fzero => zero
 | suc n, fsuc a => suc (finToNat n a)

def addF (m n : Nat) (a : Fin+1 m) (b : Fin+1 n) : Fin+1 (addN (finToNat m a) n)
 | m, n, fzero, a => a
