open struct Path (A : Pi I -> Type) (a : A 0) (b : A 1) : Type
 | at (i : I) : A i {
   | 0 => a
   | 1 => b
 }
def path {A : Pi I -> Type} (p : Pi (i : I) -> A i)
  => new Path A (p 0) (p 1) { | at i => p i }
def Eq {A : Type} (a b : A) : Type => Path (\ i => A) a b
def idp {A : Type} (a : A) : Eq a a => path (\ i => a)
prim arcoe
def hfill2d {A : Type}
  {a b c d : A}
  (p : Eq a b)
  (q : Eq b d)
  (r : Eq a c)
  (i j : I) : A
  => (arcoe (\ k => Eq (r.at k) (q.at k)) p i).at j
def hcomp2d {A : Type}
  {a b c d : A}
  (p : Eq a b)
  (q : Eq b d)
  (r : Eq a c) : Eq c d
  => path (hfill2d p q r 1)

def sym {A : Type} {a b : A} (p : Eq a b) : Eq b a => hcomp2d (idp a) (idp a) p
def trans {A : Type} {a b c : A} (p : Eq a b) (q : Eq b c) : Eq a c => hcomp2d p q (idp a)
def pmap {A B : Type} (f : Pi A -> B) {a b : A} (p : Eq a b)
  : Eq (f a) (f b) => path (\ i => f (p.at i))

open data Nat : Type | zero | suc Nat

def overlap addN (a b : Nat) : Nat
 | zero, a => a
 | a, zero => a
 | suc a, b => suc (addN a b)
 | a, suc b => suc (addN a b)

def addN-identity (a : Nat) : Eq (addN a zero) a => idp {? ?}
