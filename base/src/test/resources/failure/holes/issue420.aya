prim I
prim coe
prim intervalInv
def inline ~ => intervalInv
def Path (A : I -> Type) (a : A 0) (b : A 1) : Type => [| i |] A i {| ~ i := a | i := b |}
variable A : Type
def Eq (a b : A) : Type => Path (\ i => A) a b
def idp (a : A) : Eq a a => \i => a

open data Nat : Type | zero | suc Nat

def overlap addN (a b : Nat) : Nat
 | zero, a => a
 | a, zero => a
 | suc a, b => suc (addN a b)
 | a, suc b => suc (addN a b)

def addN-identity (a : Nat) : Eq (addN a zero) a => idp {? ?}
