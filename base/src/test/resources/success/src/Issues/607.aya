open data Single (A : Type) | single {A}

def justMatch {A : Type} (s : Single A) : Single A
  | single => s

def justMatchAgain {A : Type} (s : Single A) : Single A
  | single {a} => single {A} {a}

def justMatchAgainAgain {A : Type} (s : Single A) : Single A
  | {A}, single => s

def justMatchAgainAgainAgain {A : Type} (s : Single A) : Single A
  | {A}, single {a} => single {A} {a}
