open import Arith::Nat

struct Pair (A : Type) (B : Type) : Type
  | fst : A
  | snd : B
  | we-are-together : Sig A ** B => (fst, snd)

def test-nat-pair : Pair Nat Nat =>
  new Pair Nat Nat { | fst => zero | snd => suc zero }

def make-pair (A B : Type) (a : A) (b : B) : Pair A B =>
  new Pair A B { | fst => a | snd => b }

struct Pos1 (A : Type) : Type
  | x : A
  | y : Nat

struct Pos2 (B : Nat -> Type) : Type
  | x : Nat
  | y : B zero

struct EmptyRecord : Type
def new-empty1 => new EmptyRecord
def new-empty2 => new EmptyRecord {}
