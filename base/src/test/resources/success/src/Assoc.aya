open import Arith::Nat using (Nat, zero, suc, +)
open import Paths
-----------------------------------------

open data Term : Type
  | Bin Term Term
  | Atom Nat

def _0 : Term => Atom 0
def _1 : Term => Atom 1
def _2 : Term => Atom 2
def _3 : Term => Atom 3

def infixl * (a b : Term) : Term => Bin a b
def infixr ^ (a b : Term) : Term => Bin a b

def term1 : Term => _1 * _2 * _3
def term2 : Term => _1 ^ _2 ^ _3

def term1Ast : Term => Bin (Bin _1 _2) _3
def term2Ast : Term => Bin _1 (Bin _2 _3)

def test1 : term1 = term1Ast => idp
def test2 : term2 = term2Ast => idp

-----------------------------------------

def infixr >== {A : Type} {a b c : A} (p : a = b) (q : b = c) => p <==> q
  bind looser qed, ==<
def infix  ==< {A : Type} (a : A) {b : A} (p : a = b) => p

def infix qed {A : Type} (a : A) : a = a => idp {A} {a}

-----------------------------------------

def overlap infix +' (a b : Nat) : Nat
 | a, 0 => a
 | a, suc b => suc (a +' b)
 bind tighter =, ==<, qed

def +'-comm (a b : Nat) : a +' b = b +' a
  | 0, 0 => idp
  | suc a, 0 => pmap suc (+'-comm a 0)
  | 0, suc b => pmap suc (+'-comm 0 b)
  | suc a, suc b => pmap suc (
    suc a +' b
  ==< +'-comm (suc a) b >==
    suc (b +' a)
  ==< pmap suc (sym (+'-comm a b)) >==
    suc (a +' b)
  ==< +'-comm a (suc b) >==
    suc b +' a
  qed
  )

-----------------------------------------

def a (b : Nat) : Nat => suc b
def infix suc' (a : Nat) : Term => Atom a

def what-if-they're-prefixed : (suc' a 0) = (suc' (a 0))  => idp
def what-if-they're-prefixed' : (suc' a 0) = (Atom (suc 0))  => idp

def what-if-they're-xjbfixed : (suc' a 0) = (a 0 suc')  => idp
def what-if-they're-xjbfixed' : (a 0 suc') = (Atom (suc 0))  => idp

-----------------------------------------

open data Dir : Type | L | R
def infixl |=> (a b : Dir) : Sig Dir ** Dir => (a, b)

def id {A : Type} (a : A) : A => a

def secR => ( |=> id id id id R)
def secL => (id L |=>)

def secR' => ( |=> R)
def secL' => (L |=>)

def secR-yes : secR L = (L, R) => idp
def secL-yes : secL R = (L, R) => idp
def secR'-yes : secR' L = (L, R) => idp
def secL'-yes : secL' R = (L, R) => idp
