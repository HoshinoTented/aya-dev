open import Arith::Nat
open import Arith::Bool

def odd Nat : Bool
  | zero => false
  | suc n => even n

def even Nat : Bool
  | zero => true
  | suc n => odd n

def say (i : Universe) : Type
  | nat => Nat
  | pi a b => Pi (x : say a) -> say (b x)
  | sig a b => Sig (x : say a) ** say (b x)

open data Universe : Type
  | nat
  | pi (a : Universe) (b : say a -> Universe)
  | sig (a : Universe) (b : say a -> Universe)

def uSuc : Universe => pi  nat (\x => nat)
def uTup : Universe => sig nat (\x => nat)

def uSucVal : say uSuc => \x => suc x
def uTupVal : say uTup => (0, 0)

open data Rose (A : Type) : Type
  | infixr :> A (Forest A)

open data Forest (A : Type) : Type
  | empty
  | infixr :< (Rose A) (Forest A)

