open import Arith::Nat
open import Data::Bool

def odd Nat : Bool
  | zero => false
  | suc n => even n

def even Nat : Bool
  | zero => true
  | suc n => odd n

open data Rose (A : Type) : Type
  | infixr :> A (Forest A)

open data Forest (A : Type) : Type
  | empty
  | infixr :< (Rose A) (Forest A)

def ack Nat Nat : Nat
  | 0, n      => suc n
  | suc m, 0  => ack m 1
  | suc m, suc n => ack m (ack (suc m) n)

def f Nat : Nat
  | 0 => zero
  | suc n => g (suc n)

def g Nat : Nat
  | zero => 0
  | suc n => f n

