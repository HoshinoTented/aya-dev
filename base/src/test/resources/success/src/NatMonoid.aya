open import Paths
open import Arith::Nat

open data Unit | unit

// TODO[class]
// open class Monoid
//   | A : Type
//   | op : A -> A -> A
//   | id : A
//   | assoc (a b c : A) : op (op a b) c = op a (op b c)
//   | id_r (a: A) : op a id = a
//   | id_l (a: A) : op id a = a

// def idpath {A : Type} (a : A) => idp {A} {a}
// def +-monoid => new Monoid (+) {
//   | id x => 0
//   | assoc x y z => +-assoc
//   | id_r => idpath
//   | id_l => idpath
// }
