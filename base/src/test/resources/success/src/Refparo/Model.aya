open import Paths

public open data Unit | unit

def coe {a b : Type} (eq : a = b) (x : a) (i : I) : eq.at i
  => arcoe eq.at x i

-- *** Types

public open struct EventT : Type 1
  | AgentT : Type => Unit

def getAgentT (T : EventT) => T.AgentT
def setAgentT (A : Type) (T : EventT) : EventT
  => new EventT { | AgentT => A }
def AgentT-inv (A : Type) (T : EventT) : A = getAgentT (setAgentT A T)
  => idp


public open struct Event (T : EventT) : Type 1
  | agent : T.AgentT

def getAgent (T : EventT) (e : Event T) : T.AgentT => e.agent


def Quantifier (A : Type) => (A -> Type) -> Type

def mkConstQ {A : Type} (x : A) : Quantifier A
  => \f => f x


def Verb (T : EventT) => ulift Quantifier (Event T)

def mkVerb {T : EventT} (p : Event T -> Type) : Verb T
  => \f => Sig (e : Event T) ** (Sig (p e) ** (f e))

def VP (T : EventT) => ulift Quantifier (Event T)


def BNP (A : Type) => Quantifier A

def GNP (setT : Type -> EventT -> EventT) (A : Type)
  => Pi {T : EventT} -> VP (setT A T) -> VP (setT A T)

def NP (A : Type) => ulift GNP setAgentT A


def Theta (setT : Type -> EventT -> EventT)
  => Pi {A : Type} -> BNP A -> GNP setT A

def mkTheta
  (getT : EventT -> Type)
  (get : Pi (T : EventT) -> Event T -> getT T)
  (setT : Type 2 -> EventT -> EventT)
  (T-inv : Pi (A : Type 2) (T : EventT) -> A ↑ ↑ = getT (setT A T))
  : ↑ Theta setT
  -- q : BNP A => Quantifier A
  -- p f : VP (setT A T) => Quantifier (setT A T)
  => \{A} => \q => \{T} => \p f => ulift q (\x => p (\e =>
    Sig (get (setT A T) e ↑ = ↑ coe (T-inv A T) x right) ** (f e)))

def agentDef : Theta setAgentT
  => \{A} => mkTheta getAgentT getAgent setAgentT AgentT-inv {A}


def mkConstNP {A : Type} (x : A) : NP A
  => \{T} p => \f => p (\e => Sig (e.agent = x) ** (f e))


def Sentence => Type

def mkSentence {T : EventT} (p : ulift Quantifier (Event T)) : ulift Sentence
  => p (\x => Unit)
