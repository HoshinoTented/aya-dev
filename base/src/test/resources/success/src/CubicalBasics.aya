open import Paths

def par1 (A : Type) (u : A) (i : I) : Partial (~ i) A =>
  {| ~ i := u |}

-- By @imkiva, in PR
def p1 (A : Type) (a : A) (i : I) : Partial (~ i) A =>
  {| ~ i := a |}
def p2 (A : Type) (b : A) (j : I) : Partial (~ j) A =>
  {| ~ j := b |}
def p1=p2 (A : Type) (a : A) (i : I) : p1 A a i = p2 A a i =>
  idp

def cmp {A : Type} (x : A)
  : [| i j |] (Partial (~ j) A) {| ~ i := p1 A x j |}
  => \i => \j => p2 A x j

def transport-constant (A : I -> Type) (a : A 0) (i : I) : A i
  => (\j => A (i /\ j)).coe a freeze ~ i
-- ^ `A (i /\ j)` normalizes to `A 0` under cofibration `~ i`, which is a constant.

def transp  (A : I -> Type) (a : A 0) : A 1 => A.coe a
def transp' (A : I -> Type) (a : A 0) : A 1 => A.coe a freeze 0
def transpInv  (A : I -> Type) (a : A 1) : A 0 => A.eoc a
def transpInv' (A : I -> Type) (a : A 1) : A 0 => A.eoc a freeze 0

example def coeFillLeft (A : I -> Type) (u : A 0) : (A.coeFill u) 0 = u => idp
example def coeFillRight (A : I -> Type) (u : A 0) : (A.coeFill u) 1 = transp A u => idp

def id {A : Type} (a: A) : A => a
def transportID {A : Type} (a: A) : A => (transp (\ i => A -> A) id) a

def coePi (A : I -> Type) (B : Pi (i : I) -> A i -> Type)
    (f : Pi (a : A 0) -> B 0 a) : Pi (a : A 1) -> B 1 a
    => \a => (\i => B i ((\j => A ((~ j) \/ i)).coe a freeze i)).coe f
      ((\i => A (~ i)).coe a)

example def coePiEq (A : I -> Type) (B : Pi (i : I) -> A i -> Type)
    (f : Pi (a : A 0) -> B 0 a)
    : coePi A B f = (\i => Pi (x : A i) -> B i x).coe f
    => idp

def coeSigma (A : I -> Type) (B : Pi (i : I) -> A i -> Type)
    (t : Sig (x : A 0) ** B 0 x) : Sig (x : A 1) ** B 1 x =>
  (A.coe t.1,
     (\i => B i ((\j => A (i /\ j)).coe t.1 freeze (~ i))).coe t.2)
example def coeSigmaEq (A : I -> Type) (B : Pi (i : I) -> A i -> Type)
    (t : Sig (x : A 0) ** B 0 x)
    : coeSigma A B t = (\i => Sig (x : A i) ** B i x).coe t
    => idp
