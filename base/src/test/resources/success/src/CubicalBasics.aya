open import Paths

def par1 (A : Type) (u : A) (i : I) : Partial (~ i) A =>
  {| ~ i := u |}

// By @imkiva, in PR
def p1 (A : Type) (a : A) (i : I) : Partial (~ i) A =>
  {| ~ i := a |}
def p2 (A : Type) (b : A) (j : I) : Partial (~ j) A =>
  {| ~ j := b |}
def p1=p2 (A : Type) (a : A) (i : I) : p1 A a i = p2 A a i =>
  idp

def cmp {A : Type} (x : A)
  : [| i j |] (Partial (~ j) A) { ~ i := p1 A x j }
  => \i => \j => p2 A x j

def transp  (A : I -> Type) (a : A 0) : A 1 => coe 0 1 A a
def transpInv  (A : I -> Type) (a : A 1) : A 0 => coe 1 0 A a

def coeFill0  (A : I -> Type) (u : A 0) : Path A u (coe 0 1 A u) => \i => coe 0 i A u

def id {A : Type} (a: A) : A => a
def transportID {A : Type} (a: A) : A => (transp (\ i => A -> A) id) a

// TODO[coe]: need diagonal cof
def coePi (r s : I) (A : I -> Type) (B : ∀ (i : I) -> A i -> Type)
    (f : ∀ (a : A r) -> B r a) : ∀ (a : A s) -> B s a
    => \a => coe r s (\x => B x (coe s x A a))
      (f (coe s r A a))
example def coePiEq (r s : I) (A : I -> Type) (B : ∀ (i : I) -> A i -> Type)
    (f : ∀ (a : A r) -> B r a)
    : coePi r s A B f = coe r s (\i => ∀ (x : A i) -> B i x) f
    => idp

// example def coeSigma (A : I -> Type) (B : Fn (i : I) -> A i -> Type)
//     (t : Sig (x : A 0) ** B 0 x) : Sig (x : A 1) ** B 1 x =>
//   (A.coe t.1,
//      (\i => B i ((A t.1) i)).coe t.2)
// example def coeSigmaEq (A : I -> Type) (B : Fn (i : I) -> A i -> Type)
//     (t : Sig (x : A 0) ** B 0 x)
//     : coeSigma A B t = (\i => Sig (x : A i) ** B i x).coe t
//     => idp

example def piFromPath (A : Type) (a b : A) (p : a = b) : ∀ (i : I) -> A => p
example def piFromPathH (A : I -> Type) (a : A 0) (b : A 1)
  (p : Path A a b) : ∀ (i : I) -> A i => p
