open import Primitives using
  ( invol as ~
  , intervalMin as infix /\
  , intervalMax as infix \/
  )

def Eq (A : Type) (a b : A) : Type => [| i |] A {| i 0 := a | i 1 := b |}
def infix = {A : Type} (a b : A) => Eq A a b
def idp {A : Type} {a : A} : a = a => \i => a
def funExt {A B : Type} (f g : A -> B)
     (p : Pi (a : A) -> f a = g a) : f = g => \i a => p a i
def pmap {A B : Type} (f : A -> B) {a b : A}
     (p : a = b) : f a = f b => \i => f (p i)
def sym {A : Type} {a b : A} (p : a = b) : b = a => \i => p (~ i)

def par1 (A : Type) (u : A) (i : I) : Partial A {i 0} =>
  {| i 0 := u |}

-- By @imkiva, in PR
def p1 (A : Type) (a : A) (i : I) : Partial A {i 0} =>
  {| i 0 := a |}
def p2 (A : Type) (b : A) (j : I) : Partial A {j 0} =>
  {| j 0 := b |}
def p1=p2 (A : Type) (a : A) (i : I) : p1 A a i = p2 A a i =>
  idp

def cmp {A : Type} (x : A)
  : [| i j |] (Partial A {j 0}) {| i 0 := p1 A x j |}
  => \i => \j => p2 A x j