open import Paths

// Heterogeneous square
// c ---- cd ---- d
// |              |
// |              |
// ac            bd
// |              |
// |              |
// a ---- ab ---- b
def HeteroSquare {A : ∀ (i j : I) -> Type}
  {a : A 0 0} {b : A 0 1}
  {c : A 1 0} {d : A 1 1}
  (ab : Path (A 0) a b)
  (cd : Path (A 1) c d)
  (ac : Path (\x => A x 0) a c)
  (bd : Path (\x => A x 1) b d) : Type
  => [| i j |] A i j {
    | ~ i := ab j
    | i := cd j
    | ~ j := ac i
    | j := bd i
  }

// TODO: eta
def heteroSquare {A : ∀ (i j : I) -> Type} (p : ∀ (i j : I) -> A i j)
  : HeteroSquare {A} (\i => p 0 i) (\i => p 1 i)
    (\x => p x 0)
    (\x => p x 1) => \i j => p i j

// open class ConnectedPaths (A : Type) : Type
// | p I : A
// | q I : A {
//   | 0 => p 1
// }

// def connectPaths (A : Type) (c : ConnectedPaths A) : c.p 0 = c.q 1 =>
//   path c.p <==> path c.q

// class ConnectedSquares (A : Type) : Type
// | p I I : A
// | q I I : A {
//   | 0, i => p 1 i
// }

// def connectSquares (A : Type) (c : ConnectedSquares A) =>
