open import Data::List
open import Arith::Nat
open import Paths

def x : Nat => 114
def y (_i : Nat) : Nat => 514

def termList : List Nat => [ 1, y 2, x ]
def termListComp : List Nat => [ a + b | a <- [ 1, 2, 3 ] , b <- [ 4, 5, 6 ] ]

def termDesuList : List Nat => 1 :< (y 2) :< x :< nil
-- do { a <- [ 1, 2, 3 ], b <- [ 4, 5, 6 ], return (a + b) }
def termDesuListComp : List Nat => ([ 1, 2, 3 ]) >>= (\ a => [ 4, 5, 6 ] >>= (\ b => pure (a + b)))

def testDesuList : termList = termDesuList => idp
def testDesuListComp : termListComp = termDesuListComp => idp

def listPattern (l : List Nat) : List Nat
  | [] => nil
  | [ 1 ] => 1 :< nil
  | [ 1, e2 ] => 1 :< e2 :< nil
  | [ 1, e2, _ ] => l
  | [ _, _, _, _ ] as l' => l'
  | _ => l
