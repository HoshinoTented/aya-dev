open import Data::List
open import Arith::Nat
open import Paths

def x : Nat => 114
def y (_i : Nat) : Nat => 514

def termList : List Nat => [ 1, y 2, x ]
def termListComp : List Nat => [ a + b | a <- [ 1, 2, 3 ] , b <- [ 4, 5, 6 ] ]

def termDesuList : List Nat => 1 :< (y 2) :< x :< nil
-- do { a <- [ 1, 2, 3 ], b <- [ 4, 5, 6 ], return (a + b) }
def termDesuListComp : List Nat => [ 1, 2, 3 ] >>= (\ a => [ 4, 5, 6 ] >>= (\ b => pure (a + b)))

def testDesuList : termList = termDesuList => idp
def testDesuListComp : termListComp = termDesuListComp => idp

def listPattern (l : List Nat) : List Nat
  | [ ] => nil
  | [ 1 ] => 1 :< nil
  | [ 1, e2 ] => 1 :< e2 :< nil
  | [ 1, e2, _ ] => l
  | [ _, _, _, _ ] as l' => l'
  | _ => l

def testListPattern0 : listPattern nil = [ ] => idp
def testListPattern1 : listPattern (1 :< nil) = [ 1 ] => idp
def testListPattern2 : listPattern (1 :< 2 :< nil) = [ 1, 2 ] => idp
def testListPattern3 : listPattern (1 :< 2 :< 3 :< nil) = [ 1, 2, 3 ] => idp
def testListPattern4 : listPattern (1 :< 2 :< 3 :< 4 :< nil) = [ 1, 2, 3, 4 ] => idp

def innerListPattern (l : List (List Nat)) : List Nat
  | [ ] => nil
  | [ [ 1 ], [ 2 ], [ 3 ] ] => [ 1, 2, 3 ]
  | [ [ 1, 2, 3 ], [ ], [ ] ] => [ 1, 2, 3 ]
  | [ [ 1, 2, 3 ], [ 2, 3, 4 ] as l2, l3 ] => [ 1, 2, 3 ] ++ l2 ++ l3
  | [ [ 1, _, 3 ] as l1, [ _, _, _ ] as l2, l3 ] => l1 ++ l2 ++ l3
  | _ => concat l

def testInnerListPattern0 : innerListPattern nil = [ ] => idp
def testInnerListPattern1 : innerListPattern ([ 1 ] :< [ 2 ] :< [ 3 ] :< nil) = [ 1, 2, 3 ] => idp
def testInnerListPattern2 : innerListPattern ([ 1, 2, 3 ] :< nil :< nil :< nil) = [ 1, 2, 3 ] => idp
def testInnerListPattern3 : innerListPattern ([ 1, 2, 3 ] :< [ 2, 3, 4 ] :< [ 3, 4, 5 ] :< nil) = [ 1, 2, 3, 2, 3, 4, 3, 4, 5 ] => idp
def testInnerListPattern4 : innerListPattern ([ 1, 2, 3 ] :< [ 2, 3, 4 ] :< [ 3, 4, 5 ] :< nil) = [ 1, 2, 3, 2, 3, 4, 3, 4, 5 ] => idp

open data Single (A : Type)
  | single A

def innerListPattern2 (l : Single (List Nat)) : List Nat
  | single [ ] => nil
  | single [ 1 ] => 1 :< nil
  | single ([ e ] as l') => l'
  | single [ 1, e2 ] => 1 :< e2 :< nil
  | single ([ 1, e2, _ ] as l') => l'
  | single x => x

def testInnerListPattern2_0  : innerListPattern2 (single nil) = [ ] => idp
def testInnerListPattern2_1  : innerListPattern2 (single (1 :< nil)) = [ 1 ] => idp
def testInnerListPattern2_1' : innerListPattern2 (single [ 1 ]) = [ 1 ] => idp
def testInnerListPattern2_2  : innerListPattern2 (single (2 :< nil)) = [ 2 ] => idp
def testInnerListPattern2_2' : innerListPattern2 (single [ 2 ]) = [ 2 ] => idp
def testInnerListPattern2_3  : innerListPattern2 (single (1 :< 2 :< nil)) = [ 1, 2 ] => idp
def testInnerListPattern2_3' : innerListPattern2 (single [ 1, 2 ]) = [ 1, 2 ] => idp
def testInnerListPattern2_4  : innerListPattern2 (single (1 :< 2 :< 3 :< nil)) = [ 1, 2, 3 ] => idp
def testInnerListPattern2_4' : innerListPattern2 (single [ 1, 2, 3 ]) = [ 1, 2, 3 ] => idp
