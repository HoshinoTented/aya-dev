open import Paths

def infix ∘ { A B C : Type } ( g : B -> C ) ( f : A -> B ) : A -> C
 => \ x => g (f x)
  tighter =

struct Isomorphism { A B : Type } : Type
  | to : A -> B
  | from : B -> A
  | from∘to (a : A) : from (to a) = a
  | to∘from (b : B) : to (from b) = b

def idpath {A : Type} (a : A) => idp {A} {a}
def ident { A : Type } ( a : A ) => a
def refl { A : Type } => new Isomorphism { A } { A } {
  | to => ident
  | from => ident
  | from∘to => idpath
  | to∘from => idpath
}

struct Isomorphism' { A B : Type } : Type
  | to : A -> B
  | from : B -> A
  | from∘to : Fn (a : A) -> from (to a) = a
  | to∘from : Fn (b : B) -> to (from b) = b

def refl' { A : Type } => new Isomorphism' { A } { A } {
  | to => ident
  | from => ident
  | from∘to => idpath
  | to∘from => idpath
}
