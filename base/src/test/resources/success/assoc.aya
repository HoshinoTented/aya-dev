prim I
prim left
prim right
struct Path (A : I -> Type) (a : A left) (b : A right) : Type
 | at (i : I) : A i {
   | left => a
   | right => b
 }
def path {A : I -> Type} (p : Pi (i : I) -> A i)
  => new Path A (p left) (p right) { | at i => p i }
def infix = {A : Type} (a b : A) : Type => Path (\ i => A) a b
def idp {A : Type} (a : A) : a = a => path (\ i => a)

-----------------------------------------

open data Nat : Type | zero | suc Nat
open data Term : Type
  | Bin Term Term
  | Atom Nat

def _0 : Term => Atom zero
def _1 : Term => Atom (suc zero)
def _2 : Term => Atom (suc (suc zero))
def _3 : Term => Atom (suc (suc (suc zero)))

def infixl * (a b : Term) : Term => Bin a b
def infixr ^ (a b : Term) : Term => Bin a b

def term1 : Term => _1 * _2 * _3
def term2 : Term => _1 ^ _2 ^ _3

def term1Ast : Term => Bin (Bin _1 _2) _3
def term2Ast : Term => Bin _1 (Bin _2 _3)

def test1 : term1 = term1Ast => idp _
def test2 : term2 = term2Ast => idp _

-----------------------------------------

prim arcoe
def hfill2d {A : Type}
  {a b c d : A}
  (p : a = b)
  (q : b = d)
  (r : a = c)
  (i j : I) : A
  => (arcoe (\ k => (r.at k) = (q.at k)) p i).at j
def hcomp2d {A : Type}
  {a b c d : A}
  (p : a = b)
  (q : b = d)
  (r : a = c) : c = d
  => path (hfill2d p q r right)

def sym {A : Type} {a b : A} (p : a = b) : b = a => hcomp2d (idp a) (idp a) p
def infixr *> {A : Type} {a b c : A} (p : a = b) (q : b = c) : a = c => hcomp2d p q (idp a)
def pmap {A B : Type} (f : A -> B) {a b : A} (p : a = b)
  : f a = f b => path (\ i => f (p.at i))

def infixr >== {A : Type} {a b c : A} (p : a = b) (q : b = c) => p *> q
def infix  ==< {A : Type} (a : A) {b : A} (p : a = b) => p

def infix qed {A : Type} (a : A) : a = a => idp a

bind >== looser qed
bind >== looser ==<

-----------------------------------------

def infix + (a b : Nat) : Nat
 | a, zero => a
 | a, suc b => suc (a + b)

bind + tighter =
bind + tighter ==<
bind + tighter qed

def +-comm (a b : Nat) : a + b = b + a
  | zero, zero => idp _
  | suc a, zero => pmap suc (+-comm a zero)
  | zero, suc b => pmap suc (+-comm zero b)
  | suc a, suc b => pmap suc (
    suc a + b
  ==< +-comm (suc a) b >==
    suc (b + a)
  ==< pmap suc (sym (+-comm a b)) >==
    suc (a + b)
  ==< +-comm a (suc b) >==
    suc b + a
  qed
  )
