prim I
prim left
prim right
struct Path (A : I -> Type) (a : A left) (b : A right) : Type
  | at (i : I) : A i {
    | left => a
    | right => b
  }
def path {A : I -> Type} (p : Pi (i : I) -> A i)
  => new Path A (p left) (p right) { | at i => p i }
def infix = {A : Type} (a b : A) : Type => Path (\ i => A) a b
def idp {A : Type} (a : A) : a = a => path (\ i => a)

prim arcoe
def hfill2d {A : Type}
  {a b c d : A}
  (p : a = b)
  (q : b = d)
  (r : a = c)
  (i j : I) : A
  => (arcoe (\ k => (r.at k) = (q.at k)) p i).at j
def hcomp2d {A : Type}
  {a b c d : A}
  (p : a = b)
  (q : b = d)
  (r : a = c) : c = d
  => path (hfill2d p q r right)

def sym {A : Type} {a b : A} (p : a = b) : b = a => hcomp2d (idp a) (idp a) p
def infix ~ {A : Type} {a b c : A} (p : a = b) (q : b = c) : a = c => hcomp2d p q (idp a)
def pmap {A B : Type} (f : A -> B) {a b : A} (p : a = b)
  : f a = f b => path (\ i => f (p.at i))

def funext {A B : Type} (f g : A -> B) (p : Pi (a : A) -> f a = g a) : f = g
  => path (\ i => \ x => (p x).at i)

open data Nat : Type
  | zero
  | suc Nat

def infix + (m n : Nat) : Nat
  | zero, n => n
  | n, zero => n
  | suc m, n => suc (m + n)
  | m, suc n => suc (m + n)

bind + tighter =

def +-comm (x y : Nat) : x + y = y + x
  | zero, n => idp n
  | suc n, m => pmap suc (+-comm n m)

def +-assoc (x y z : Nat) : x + (y + z) = (x + y) + z
  | zero, y, z => idp _
  | suc x, y, z => pmap suc (+-assoc x y z)

def infix * (m n : Nat) : Nat
  | zero, n => zero
  | m, zero => zero
  | suc m, suc n => suc (m + n + m * n)

def infix *' (m n : Nat) : Nat
  | zero, n => zero
  | m, zero => zero
  | suc m, n => n + m *' n

bind * tighter +
bind *' tighter +

def *'-suc (m n : Nat) : m *' (suc n) = m + m *' n
  | zero, n => idp _
  | suc m, n => (pmap (\ x => suc (n + x)) (*'-suc m n))
    ~ (pmap suc (+-assoc n m (m *' n)))
    ~ (pmap (\ x => suc (x + m *' n)) (+-comm n m))
    ~ (pmap suc (sym (+-assoc m n (m *' n))))

def *'-suc-suc (m n : Nat) : (suc m) *' (suc n) = suc (m + n + m *' n)
  => (pmap ((suc n) +) (*'-suc m n))
    ~ (pmap suc (+-assoc n m (m *' n)))
    ~ (pmap (\ x => suc (x + m *' n)) (+-comm n m))

def *-*'-iso (m n : Nat) : m * n = m *' n
  | zero, n => idp _
  | m, zero => idp _
  | suc m, suc n => (pmap (\ x => suc (m + n + x)) (*-*'-iso m n)) ~ (sym (*'-suc-suc m n))

def *-*'-eq : (*) = (*') => funext (*) (*') (\ m => funext (m *) (m *') (*-*'-iso m))

def err_eq (m n : Nat) : m * n = m *' n => pmap (\ f => f m n) *-*'-eq
