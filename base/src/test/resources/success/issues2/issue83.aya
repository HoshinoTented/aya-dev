open data N : Type | zero | suc N

def infix + (a b : N) : N
  | zero, a => a
  | a, zero => a
  | suc a, b => suc (a + b)
  | a, suc b => suc (a + b)

open data Vec (A : Type) (n : N) : Type
  | A, zero => vnil
  | A, suc m => infix ++ A (Vec A m)

def fold {A R : Type} {n : N} (f : Pi R A -> R) (init : R) (xs : Vec A n) : R
  | {A}, {R}, {zero}, f, init, vnil => init
  | {A}, {R}, {suc m}, f, acc, x ++ xs => fold f (f acc x) xs
