open data Nat : Type
 | zero
 | suc Nat

open data Int : Type
 | pos Nat
 | neg Nat { | zero => pos zero }

def overlap addN (a b : Nat) : Nat
 | zero, a => a
 | a, zero => a
 | suc a, b => suc (addN a b)
 | a, suc b => suc (addN a b)

def overlap randomTest (a b : Nat) : Type
 | zero, a => Nat -> Nat
 | a, zero => Nat -> Nat
 | suc a, suc b => Sig Nat ** Nat

def overlap subNI (a b : Nat) : Int
 | zero, a => neg a
 | a, zero => pos a
 | suc a, suc b => subNI a b

def overlap addI (a b : Int) : Int
 | pos zero, n => n
 | n, pos zero => n
 | neg zero, n => n
 | n, neg zero => n
 | pos n, pos m => pos (addN n m)
 | neg n, neg m => neg (addN n m)
 | neg n, pos m => subNI m n
 | pos n, neg m => subNI n m
