open import Paths
open import Arith::Nat
open import Data::List::Core

variable A B C : Type

// ----- functorial -----
def fmap {A B : Type} => map {A} {B}

def pure (x : A) : List A => x :< nil

def infixl <*> (fs : List (A -> B)) (xs : List A) : List B
| nil, _ => nil
| f :< fs, xs => (fmap f xs) ++ (fs <*> xs)
  tighter =
  looser  +

def empty {A : Type} : List A => nil

def infixl <|> (l1 l2 : List A) : List A => l1 ++ l2
  tighter =
  looser  <*>

// ----- monadic -----
def return {A : Type} => pure {A}

def join {A : Type} => concat {A}

def infix >>= (l : List A) (f : A -> List B) : List B => join (fmap f l)
tighter =

def infix >> (l1 : List A) (l2 : List B) : List B => do l1, l2
tighter =

def liftM (f : A -> B) (l : List A) : List B =>
  do x <- l,
     return (f x)

def ap (fs : List (A -> B)) (xs : List A) : List B =>
  do f <- fs,
     x <- xs,
     return (f x)

def infix >=> (f : A -> List B) (g : B -> List C) : A -> List C => \x => f x >>= g
tighter =
