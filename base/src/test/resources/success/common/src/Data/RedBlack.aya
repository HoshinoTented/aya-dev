open import Arith::Nat
open import Data::List
open import Data::Bool
variable A : Type

---- Red black tree, extrinsic ----

public open data Color | red | black
def Decider (A : Type) => Pi (x y : A) -> Bool

module RedBlackEx {
  open data RBTree (A : Type) : Type
  | rbLeaf
  | rbNode Color (RBTree A) A (RBTree A)

  def rbTreeToList (RBTree A) (List A) : List A
  | rbLeaf, r => r
  | rbNode x t1 a t2, r => rbTreeToList t1 (a cons rbTreeToList t2 r)

  def repaint (RBTree A) : RBTree A
  | rbNode c l a r => rbNode black l a r
  | rbLeaf => rbLeaf

  def balanceLeft Color (RBTree A) A (RBTree A) : RBTree A
  | black, rbNode red (rbNode red a x b) y c, v, r => rbNode red (rbNode black a x b) y (rbNode black c v r)
  | black, rbNode red a x (rbNode red b y c), v, r => rbNode red (rbNode black a x b) y (rbNode black c v r)
  | c, a, v, r => rbNode c a v r

  def balanceRight Color (RBTree A) A (RBTree A) : RBTree A
  | black, l, v, rbNode red (rbNode red b y c) z d => rbNode red (rbNode black l v b) y (rbNode black c z d)
  | black, l, v, rbNode red b y (rbNode red c z d) => rbNode red (rbNode black l v b) y (rbNode black c z d)
  | c, l, v, b => rbNode c l v b

  def insert-lemma (Decider A) (a a1 : A) Color (l1 l2 : RBTree A) Bool : RBTree A
  | dec<, a, a1, c, l1, l2, true => balanceRight c l1 a1 (insert a l2 dec<)
  | dec<, a, a1, c, l1, l2, false => balanceLeft c (insert a l1 dec<) a1 l2

  def insert A (RBTree A) (Decider A) : RBTree A
  | a, rbLeaf, dec< => rbNode red rbLeaf a rbLeaf
  | a, rbNode c l1 a1 l2, dec< => insert-lemma dec< a a1 c l1 l2 (dec< a1 a)

  def aux (List A) (RBTree A) (Decider A) : RBTree A
  | nil, r, dec< => r
  | a cons l, r, dec< => aux l (repaint (insert a r dec<)) dec<

  def tree-sort (dec< : Decider A) (l : List A) => rbTreeToList (aux l rbLeaf dec<) nil
}

---- Red black tree, intrinsic ----

module RedBlackIn {
  open data Tree (A : Type) Color Nat : Type
  | A, black, zero => rbLeaf
  | A, red, n => rbRed (Tree A black n) A (Tree A black n)
  | A, black, suc n => rbBlack {c1 c2 : Color} (Tree A c1 n) A (Tree A c2 n)

  def RBTree (A : Type) : Type => Sig (n : Nat) ** (Tree A black n)

  variable n : Nat
  variable c c1 c2 : Color

  open data HTree (A : Type) Nat : Type
  | A, m => hRed (Tree A red m)
  | A, suc m => hBlack (Tree A black (suc m))

  open data AlmostTreeData (A : Type) Color Nat : Type
  | A, black, suc n => alBlack {c1 c2 : Color} (Tree A c1 n) A (Tree A c2 n)
  | A, red, n => alRed {c1 c2 : Color} (Tree A c1 n) A (Tree A c2 n)
  def AlmostTree (A : Type) (n : Nat) : Type => Sig (c : Color) ** (AlmostTreeData A c n)

  def balanceLeftRed (HTree A n) A (Tree A c n) : AlmostTree A n
  | hRed l, x, r => (_, alRed l x r)
  | hBlack l, x, r => (_, alRed l x r)

  def balanceRightRed (Tree A c n) A (HTree A n) : AlmostTree A n
  | l, x, hRed r => (_, alRed l x r)
  | l, x, hBlack r => (_, alRed l x r)

  def balanceLeftBlack (AlmostTree A n) A (Tree A c n) : HTree A (suc n)
  -- rotation
  | (red, alRed (rbRed a x b) y c), z, d => hRed (rbRed (rbBlack a x b) y (rbBlack c z d))
  | (red, alRed a x (rbRed b y c)), z, d => hRed (rbRed (rbBlack a x b) y (rbBlack c z d))
  -- expand catch-all for different proofs
  | (red, alRed rbLeaf x rbLeaf), y, r => hBlack (rbBlack (rbRed rbLeaf x rbLeaf) y r)
  | (red, alRed {black} {black} l x r), y, c => hBlack (rbBlack (rbRed l x r) y c)
  | (black, alBlack a x b), y, r => hBlack (rbBlack (rbBlack a x b) y r)

  def balanceRightBlack (Tree A c n) A (AlmostTree A n) : HTree A (suc n)
  -- rotation
  | a, x, (red, alRed (rbRed b y c) z d) => hRed (rbRed (rbBlack a x b) y (rbBlack c z d))
  | a, x, (red, alRed b y (rbRed c z d)) => hRed (rbRed (rbBlack a x b) y (rbBlack c z d))
  -- ditto
  | a, x, (red, alRed rbLeaf y rbLeaf) => hBlack (rbBlack a x (rbRed rbLeaf y rbLeaf))
  | a, x, (red, alRed {black} {black} l y r) => hBlack (rbBlack a x (rbRed l y r))
  | a, x, (black, alBlack b y c) => hBlack (rbBlack a x (rbBlack b y c))

  def forget (HTree A n) : AlmostTree A n
  | hRed (rbRed l x r) => (_, alRed l x r)
  | hBlack (rbBlack l x r) => (_, alBlack l x r)

  def insertBlack (Tree A black n) A (Decider A) : HTree A n
  | rbLeaf, x, dec< => hRed (rbRed rbLeaf x rbLeaf)
  | rbBlack l y r, x, dec< => insertBlack-lemma dec< l y r x (dec< x y)

  def insertBlack-lemma (Decider A) (Tree A c1 n) A (Tree A c2 n) A Bool : HTree A (suc n)
  | dec<, l, y, r, x, true => balanceLeftBlack (insertRed l x dec<) y r
  | dec<, l, y, r, x, false => balanceRightBlack l x (insertRed r x dec<)

  def insertRed (Tree A c n) A (Decider A) : AlmostTree A n
  | rbLeaf, x, dec< => forget (insertBlack rbLeaf x dec<)
  | rbBlack l y r, x, dec< => forget (insertBlack (rbBlack l y r) x dec<)
  | rbRed l y r, x, dec< => insert-lemma dec< l y r x (dec< x y)

  def insert-lemma (Decider A) (Tree A black n) A (Tree A black n) A Bool
    : AlmostTree A n
  | dec<, l, y, r, x, true => balanceLeftRed (insertBlack l x dec<) y r
  | dec<, l, y, r, x, false => balanceRightRed l y (insertBlack r x dec<)

  def dyeRoot (HTree A n) : RBTree A
  | hRed (rbRed l x r) => (_, rbBlack l x r)
  | hBlack (rbBlack l x r) => (_, rbBlack l x r)

  def insert (t : RBTree A) (x : A) (dec< : Decider A)
      => dyeRoot (insertBlack t.2 x dec<)
}
