open import Arith::Nat
open import Data::List::Core
open import Data::Tree::RedBlack::Base

variable A : Type

open data Tree (A : Type) Color Nat : Type
| A, black, 0 => rbLeaf
| A, red, n => rbRed (Tree A black n) A (Tree A black n)
| A, black, suc n => rbBlack {c1 c2 : Color} (Tree A c1 n) A (Tree A c2 n)

def RBTree (A : Type) : Type => Sig (n : Nat) ** (Tree A black n)

variable n : Nat
variable c c1 c2 : Color

open data HTree (A : Type) Nat : Type
| A, m => hRed (Tree A red m)
| A, suc m => hBlack (Tree A black (suc m))

open data AlmostTreeData (A : Type) Color Nat : Type
| A, black, suc n => alBlack {c1 c2 : Color} (Tree A c1 n) A (Tree A c2 n)
| A, red, n => alRed {c1 c2 : Color} (Tree A c1 n) A (Tree A c2 n)
def AlmostTree (A : Type) (n : Nat) : Type => Sig (c : Color) ** (AlmostTreeData A c n)

def balanceLeftRed (HTree A n) A (Tree A c n) : AlmostTree A n
| hRed l, x, r => (_, alRed l x r)
| hBlack l, x, r => (_, alRed l x r)

def balanceRightRed (Tree A c n) A (HTree A n) : AlmostTree A n
| l, x, hRed r => (_, alRed l x r)
| l, x, hBlack r => (_, alRed l x r)

def balanceLeftBlack (AlmostTree A n) A (Tree A c n) : HTree A (suc n)
// rotation
| (red, alRed (rbRed a x b) y c), z, d => hRed (rbRed (rbBlack a x b) y (rbBlack c z d))
| (red, alRed a x (rbRed b y c)), z, d => hRed (rbRed (rbBlack a x b) y (rbBlack c z d))
// expand catch-all for different proofs
| (red, alRed rbLeaf x rbLeaf), y, r => hBlack (rbBlack (rbRed rbLeaf x rbLeaf) y r)
| (red, alRed {black} {black} l x r), y, c => hBlack (rbBlack (rbRed l x r) y c)
| (black, alBlack a x b), y, r => hBlack (rbBlack (rbBlack a x b) y r)

def balanceRightBlack (Tree A c n) A (AlmostTree A n) : HTree A (suc n)
// rotation
| a, x, (red, alRed (rbRed b y c) z d) => hRed (rbRed (rbBlack a x b) y (rbBlack c z d))
| a, x, (red, alRed b y (rbRed c z d)) => hRed (rbRed (rbBlack a x b) y (rbBlack c z d))
// ditto
| a, x, (red, alRed rbLeaf y rbLeaf) => hBlack (rbBlack a x (rbRed rbLeaf y rbLeaf))
| a, x, (red, alRed {black} {black} l y r) => hBlack (rbBlack a x (rbRed l y r))
| a, x, (black, alBlack b y c) => hBlack (rbBlack a x (rbBlack b y c))

def forget (HTree A n) : AlmostTree A n
| hRed (rbRed l x r) => (_, alRed l x r)
| hBlack (rbBlack l x r) => (_, alBlack l x r)

def insertBlack (Tree A black n) A (Decider A) : HTree A n
| rbLeaf, x, dec< => hRed (rbRed rbLeaf x rbLeaf)
| rbBlack l y r, x, dec< => match dec< x y {
  | true => balanceLeftBlack (insertRed l x dec<) y r
  | false => balanceRightBlack l x (insertRed r x dec<)
}

def insertRed (Tree A c n) A (Decider A) : AlmostTree A n
| rbLeaf, x, dec< => forget (insertBlack rbLeaf x dec<)
| rbBlack l y r, x, dec< => forget (insertBlack (rbBlack l y r) x dec<)
| rbRed l y r, x, dec< => match dec< x y {
  | true => balanceLeftRed (insertBlack l x dec<) y r
  | false => balanceRightRed l y (insertBlack r x dec<)
}

def dyeRoot (HTree A n) : RBTree A
| hRed (rbRed l x r) => (_, rbBlack l x r)
| hBlack (rbBlack l x r) => (_, rbBlack l x r)

def insert (t : RBTree A) (x : A) (dec< : Decider A)
    => dyeRoot (insertBlack t.2 x dec<)
