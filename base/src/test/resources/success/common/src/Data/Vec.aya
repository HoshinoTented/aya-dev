open import Arith::Nat
open import Sets::Fin
open import Data::List
open import Paths

open data Vec (A : Type) (n : Nat) : Type
| A, 0 => vnil
| A, suc m => infixr :> A (Vec A m)

variable A B : Type
variable n m o : Nat

def vmap (f : A -> B) (xs : Vec A n) : Vec B n
| f, vnil => vnil
| f, x :> xs => f x :> vmap f xs

def overlap infix ++v (xs : Vec A n) (ys : Vec A m) : Vec A (n + m)
| vnil, ys => ys
| xs, vnil => xs
| x :> xs, ys => x :> (xs ++v ys)
tighter =

def overlap ++v-assoc (xs : Vec A n) (ys : Vec A m) (zs : Vec A o)
  : Path (\i => Vec A (+-assoc i)) ((xs ++v ys) ++v zs) (xs ++v (ys ++v zs))
| vnil, ys, zs => idp
| xs, vnil, zs => idp
| xs, ys, vnil => idp
-- | x :> xs, ys, zs => pmapd (Vec _) (x :>) (++v-assoc xs ys zs)
| x :> xs, ys, zs => \i => x :> (++v-assoc xs ys zs) i

def infix !!v (l : Vec A n) (i : Fin n) : A
| a :> l, fzero => a
| a :> l, fsuc i => l !!v i

def fold (f : Pi B A -> B) (init : B) (xs : Vec A n) : B
| f, init, vnil => init
| f, acc, x :> xs => fold f (f acc x) xs

def last (Vec A (suc n)) : A
| x :> vnil => x
-- | _ :> xs => last xs
-- ^ The purpose of #243 is to make this work
| _ :> (x :> xs) => last (x :> xs)

def tail (Vec A (suc n)) : Vec A n
| _ :> xs => xs

def toList (Vec A n) : List A
| a :> xs => a :< toList xs
| vnil => nil

def fromList (l : List A) : Vec A (length l)
| a :< l => a :> fromList l
| nil => vnil
