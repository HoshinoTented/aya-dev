open import Arith::Nat

public open data Fin (n : Nat)
| suc n => fzero
| suc n => fsuc (Fin n)

def finToNat (n : Nat) (att : Fin n) : Nat
 | suc n, fzero => zero
 | suc n, fsuc a => suc (finToNat n a)

def addF {m n : Nat} (a : Fin m) (b : Fin n) : Fin (finToNat m a + n)
 | fzero, a => a
 | fsuc a, b => fsuc (addF a b)
