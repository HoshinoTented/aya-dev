open import Arith::Nat using (Nat)

// https://choukh.github.io/agda-lvo/NonWellFormed.Ordinal.html
open data Ord
| zero | suc Ord
| lim (Nat -> Ord)

open data Depth Ord
| suc α => empty
| suc α => next (Depth α)
| lim f => exist (n : Nat) (Depth (f n))

variable α : Ord
def pred (Depth α) : Ord
| empty => α
| next d => pred d
| {lim f}, exist n d => pred {f n} d

open data infix ≤ Ord Ord
| zero, β => z≤
| suc α, β => s≤ {d : Depth β} (α ≤ pred d)
| lim f, β => l≤ (∀ n → f n ≤ β)
