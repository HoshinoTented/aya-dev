public open import Primitives

public open struct Path (A : I -> Type) (a : A 0) (b : A 1) : Type
  | at (i : I) : A i {
    | 0 => a
    | 1 => b
  }
def path {A : I -> Type} (p : Pi (i : I) -> A i)
  => new Path A (p 0) (p 1) { | at i => p i }

variable A B C D : Type

def infix = (a b : A) : Type => Path (\ i => A) a b
def idp {a : A} : a = a => path (\ i => a)

def psqueeze {a b : A} (p : a = b) (i : I)
 : a = p.at i => path (\j => p.at (i /\ j))

def J {a : A} (B : Pi (b : A) -> a = b -> Type)
      (r : B a idp) {b : A} (p : a = b) : B b p =>
      arcoe (\ i => B (p.at i) (psqueeze p i)) r 1

def transport {a b : A} (B : A -> Type) (p : a = b) (x : B a) : B b
  => J (\b' p' => B b') x p

def JÎ² {a : A} (B : Pi (b : A) -> a = b -> Type)
        (r : B a idp) : J B r idp = r => idp

def funExt (f g : A -> B) (p : forall a -> f a = g a) : f = g
  => path (\ i x => (p x).at i)

def funExt2 (f g : A -> B -> C) (p : forall a b -> f a b = g a b) : f = g
  => path (\ i a b => (p a b).at i)

def funExt3 (f g : A -> B -> C -> D) (p : forall a b c -> f a b c = g a b c) : f = g
  => path (\ i a b c => (p a b c).at i)

-- The most general path mapping
def pmapd' {A : I -> Type} (B : Pi (i : I) (A i) -> Type)
    (f : Pi (i : I) (a : A i) -> B i a)
    {a : A 0} {b : A 1} (p : Path A a b)
  : Path (\i => B i (p.at i)) (f 0 a) (f 1 b) => path (\ i => f i (p.at i))

def pmap (f : A -> B) {a b : A} (p : a = b) : f a = f b => pmapd' _ (\ i => f) p

def hfill2d
  {a b c d : A}
  (p : a = b)
  (q : b = d)
  (r : a = c)
  (i j : I) : A
  => (arcoe (\ k => r.at k = q.at k) p i).at j
def hcomp2d
  {a b c d : A}
  (p : a = b)
  (q : b = d)
  (r : a = c) : c = d
  => path (hfill2d p q r 1)

def sym {a b : A} (p : a = b) : b = a => hcomp2d idp idp p
def infixr <==> {a b c : A} (p : a = b) (q : b = c) : a = c => hcomp2d p q idp
