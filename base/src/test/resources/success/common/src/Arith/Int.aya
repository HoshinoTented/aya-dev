open import Arith::Nat
open import Paths

public open data Int
| pos Nat
| neg Nat { | 0 => pos 0 }

open struct IntElimData (R : Int -> Type) : Type
| posElim (x : Nat) : R (pos x)
| negElim (x : Nat) : R (neg x) {
  | 0 => posElim 0
}

def overlap subNI (a b : Nat) : Int
| 0, a => neg a
| a, 0 => pos a
| suc a, suc b => subNI a b

def overlap addI (a b : Int) : Int
| pos 0, n => n
| n, pos 0 => n
| neg 0, n => n
| n, neg 0 => n
| pos n, pos m => pos (n + m)
| neg n, neg m => neg (n + m)
| neg n, pos m => subNI m n
| pos n, neg m => subNI n m

def addI-comm (a b : Int) : addI a b = addI b a
| pos n, pos m => pmap pos (+-comm n m)
| neg n, neg m => pmap neg (+-comm n m)
| pos n, neg m => idp
| neg n, pos m => idp
