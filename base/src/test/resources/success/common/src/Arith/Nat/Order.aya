open import Arith::Nat::Core
open import Logic::False
open import Paths

open data infix < Nat Nat
| 0, suc m => zc
| suc n, suc m => sc (n < m)

variable a b c : Nat

def trans< (a < b) (b < c) : a < c
| zc, sc _ => zc
| sc p1, sc p2 => sc (trans< p1 p2)

def asym (a < b) (b < a) : False
| zc, ()
| sc p1, sc p2 => asym p1 p2
