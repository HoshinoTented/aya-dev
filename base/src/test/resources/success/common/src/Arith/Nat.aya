open import Paths

public open data Nat
| zero
| suc Nat

def overlap infixl + (a b : Nat) : Nat
| zero, a => a
| a, zero => a
| suc a, b => suc (a + b)
| a, suc b => suc (a + b)
bind tighter =

def overlap +-assoc-lemma (a b c : Nat) : (a + b) + c = a + (b + c)
| zero, b, c => idp
| a, zero, c => idp
| a, b, zero => idp
| suc a, b, c => pmap suc (+-assoc-lemma a b c)
| a, suc b, c => pmap suc (+-assoc-lemma a b c)
| a, b, suc c => pmap suc (+-assoc-lemma a b c)
def +-assoc {a b c : Nat} => +-assoc-lemma a b c

def overlap +-comm (a b : Nat) : a + b = b + a
| zero, a => idp
| a, zero => idp
| suc a, b => pmap suc (+-comm _ _)
| a, suc b => pmap suc (+-comm _ _)

def overlap infixl *' (m n : Nat) : Nat
| zero, n => zero
| m, zero => zero
| suc m, suc n => suc (m + n + m *' n)
bind tighter +

def overlap infixl * (m n : Nat) : Nat
| zero, n => zero
| m, zero => zero
| suc m, n => n + m * n
bind tighter +

def *-suc (m n : Nat) : m * suc n = m + m * n
| zero, n => idp
| suc m, n => pmap suc (pmap (n +) (*-suc m n)
  <==> sym +-assoc <==> pmap (+ m * n) (+-comm n m) <==> +-assoc)

def overlap +-*-distl (n m k : Nat) : (m + k) * n = k * n + m * n
| n, m, zero => idp
| n, m, suc k => pmap (n +) (+-*-distl n m k) <==> sym +-assoc

def *-suc-suc (m n : Nat) : suc m * suc n = suc (m + n + m * n)
  => pmap suc (pmap (n +) (*-suc m n)
    <==> sym +-assoc <==> pmap (+ m * n) (+-comm n m))

def overlap *'-*-iso (m n : Nat) : m *' n = m * n
| zero, n => idp
| m, zero => idp
| suc m, suc n => pmap (\ x => suc (m + n + x)) (*'-*-iso m n)
  <==> sym (*-suc-suc m n)

def *'-*-eq : (*') = (*) => funExt2 (*') (*) *'-*-iso
