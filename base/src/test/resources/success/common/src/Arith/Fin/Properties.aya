open import Paths
open import Arith::Fin::Core
open import Arith::Nat::Core
open import Arith::Nat::Order
open import Logic::False

private def fin-inj {n : Nat} (Fin (suc n)) : Type
| fzero  => Fin n
| fsuc _ => False
def fzâ‰ fs {n : Nat} {b : Fin n} (p : fzero = fsuc b) : False => (\ i => fin-inj (p i)).coe b

def finToNat-valid {n : Nat} (x : Fin n) : finToNat x < n
| fzero =>
  // Goal : 0 < suc n'
  zc
| fsuc x' =>
  // x' : Fin n'
  // Goal : finToNat (fsuc x') < suc n'
  //      : suc (finToNat x') < suc n'
  sc
    // Goal : (finToNat x') < n'
    (finToNat-valid x')

def finToNatToFin {n : Nat} (x : Fin n) : natToFin n (finToNat x) (finToNat-valid x) = x
| fzero => idp
| fsuc x' =>
  // nH : n = suc n'
  // x : Fin (suc n')
  // x' : Fin n'
  // Goal : natToFin (suc n') (finToNat (fsuc x')) (finToNat-valid (fsuc x')) = fsuc {n'} x'
  //      : natToFin (suc n') (suc (finToNat x'))  (sc (finToNat-valid x')    = fsuc {n'} x'
  //      : fsuc (natToFin n' (finToNat x')        (finToNat-valid x')        = fsuc {n'} x'
  pmap fsuc (finToNatToFin x')
