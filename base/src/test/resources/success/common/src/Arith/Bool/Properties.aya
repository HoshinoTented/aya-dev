import Paths
import Logic::False
import Arith::Bool::Core

open Paths
open Logic::False
open Arith::Bool::Core

private def bool-inj Bool : Type
| true => Bool
| false => False
def t≠f (p : true = false) : False => (\ i => bool-inj (p i)).coe true

def notTrue {b : Bool} (p : ¬ (b = true)) : b = false
| {true}, p => elim (p idp)
| {false}, _ => idp

def notFalse {b : Bool} (p : ¬ (b = false)) : b = true
| {false}, p => elim (p idp)
| {true}, _ => idp
