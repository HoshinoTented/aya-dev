public open import Arith::Nat::Core

open data Fin (n : Nat)
| suc n => fzero
| suc n => fsuc (Fin n)

def finToNat {n : Nat} (att : Fin n) : Nat
 | fzero => 0
 | fsuc a => suc (finToNat a)

def addF {m n : Nat} (a : Fin m) (b : Fin n) : Fin (finToNat a + n)
 | fzero, a => a
 | fsuc a, b => fsuc (addF a b)
