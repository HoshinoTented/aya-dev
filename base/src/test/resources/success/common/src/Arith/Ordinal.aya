open import Arith::Nat using (Nat)
open import Relation::Formula

// https://choukh.github.io/agda-lvo/NonWellFormed.Ordinal.html
open data Ord
| zero | suc Ord
| lim (Nat -> Ord)

open data Depth Ord
| suc α => empty
| suc α => next (Depth α)
| lim f => exist (n : Nat) (Depth (f n))

variable α β : Ord
def pred (Depth α) : Ord
| {suc α}, empty => α
| next d => pred d
| {lim f}, exist n d => pred {f n} d

open data infix ≤ Ord Ord
| zero, β => z≤
| suc α, β => s≤ {d : Depth β} (α ≤ pred d)
| lim f, β => l≤ (∀ n → f n ≤ β)

def ≤f⇒≤l {f : _} {n : Nat} (α ≤ f n) : α ≤ lim f
| z≤ => z≤
// TODO: investigate unification
| s≤ ≤∸ => s≤ {d := exist {f} _ _} ≤∸
| l≤ f≤ => l≤ (λ m => ≤f⇒≤l {f := f} (f≤ m))

def s≤s (p : α ≤ β) : suc α ≤ suc β => s≤ {d := empty} p

def ≤-refl : Reflexive (≤)
| {zero} => z≤
| {suc α} => s≤s ≤-refl
| {lim f} => l≤ {f := f} (λ n => ≤f⇒≤l {f := f} ≤-refl)
