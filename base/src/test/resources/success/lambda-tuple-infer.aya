open data ℕ
  | zero
  | suc ℕ

def overlap infix + (a b : ℕ) : ℕ
 | zero, a => a
 | a, zero => a
 | suc a, b => suc (a + b)
 | a, suc b => suc (a + b)

example def test => \ x => x + zero

example def test2 => (zero, suc zero)

def addTup (Sig ℕ ** ℕ) : ℕ
 | (zero, a) => a
 | (a, zero) => a
 | (suc a, b) => suc (a + b)
 | (a, suc b) => suc (a + b)

open data Wow (n : ℕ)
 | suc zero => wow

example def test3 : Wow (addTup test2) => wow
