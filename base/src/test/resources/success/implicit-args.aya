open data Nat : Type 0 | zero | suc Nat
open data Bool : Type 0 | true | false
open data Int : Type 0
 | pos Nat
 | neg Nat { | zero => pos zero }
def ifElse {A : Type} (b : Bool) (x y : A) : A
 | true, x, y => x
 | false, x, y => y
open data List (A : Type 0) : Type 0
 | nil | cons A (List A)
def simple : List Nat => cons zero (cons (suc zero) (nil {_}))
def len {A : Type 0} (xs : List A) : Nat
 | nil => zero
 | cons x xs => suc (len xs)
def map {A B : Type 0} (f : Pi A -> B) (xs : List A) : List B
 | f, nil => nil {_}
 | f, cons x xs => cons (f x) (map f xs)
def filter {A : Type 0} (f : Pi A -> Bool) (xs : List A) : List A
 | f, nil => nil {_}
 | f, cons x xs => ifElse (f x) (cons x (filter f xs)) (filter f xs)
def length1: Nat => len {A => Nat} simple
def length2: Nat => len (map {B => Int} pos simple)
