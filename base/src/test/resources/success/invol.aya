prim I
prim left
prim right
prim invol

struct Path (A : Pi I -> Type) (a : A left) (b : A right) : Type
  | at (i : I) : A i { | left => a
                       | right => b }

def `≡` Eq {A : Type} (a b : A) : Type
  => Path (\ i => A) a b

def idp {A : Type} (a : A) : a ≡ a
  => new Path (\ i => A) a a { | at i => a }

def test : Eq (invol left) right
  => idp _
