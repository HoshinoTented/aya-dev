prim I
prim left
prim right
struct Path (A : I -> Type) (a : A left) (b : A right) : Type
 | at (i : I) : A i {
   | left => a
   | right => b
 }
def path {A : I -> Type} (p : Pi (i : I) -> A i)
  => new Path A (p left) (p right) { | at i => p i }
def Eq {A : Type} (a b : A) : Type => Path (\ i => A) a b
def idp {A : Type} {a : A} : Eq a a => path (\ i => a)

prim arcoe
def hfill2d {A : Type}
  {a b c d : A}
  (p : Eq a b)
  (q : Eq b d)
  (r : Eq a c)
  (i j : I) : A
  => (arcoe (\ k => Eq (r.at k) (q.at k)) p i).at j
def hcomp2d {A : Type}
  {a b c d : A}
  (p : Eq a b)
  (q : Eq b d)
  (r : Eq a c) : Eq c d
  => path (hfill2d p q r right)

def sym {A : Type} {a b : A} (p : Eq a b) : Eq b a => hcomp2d idp idp p
def pmap {A B : Type} (f : A -> B) {a b : A} (p : Eq a b)
  : Eq (f a) (f b) => path (\ i => f (p.at i))
open data Nat | zero | suc Nat

def overlap addN (a b : Nat) : Nat
| zero, a => a
| a, zero => a
| suc a, b => suc (addN a b)
| a, suc b => suc (addN a b)

def overlap addN-comm (a b : Nat) : Eq (addN a b) (addN b a)
 | zero, a => idp
 | a, zero => idp
 | suc a, b => pmap suc (addN-comm _ _)
