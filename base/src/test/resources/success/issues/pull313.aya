open data Nat : Type 0
 | zero
 | suc Nat

data Fin (n : Nat) : Type 0
 | suc m => fzero
 | suc m => fsuc (Fin m)

def cover1 (f : Fin zero) : Nat

def cover2 (f : Fin (suc zero)) : Nat
 | fzero => zero
 | fsuc impossible

def cover2-fuel (f : Fin (suc zero)) : Nat
 | fzero => zero

def finToNat (n : Nat) (att : Fin n) : Nat
 | suc n, fzero => zero
 | suc n, fsuc a => suc (finToNat n a)
