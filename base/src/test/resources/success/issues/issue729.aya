prim I
prim left
prim right
struct Path (A : I -> Type) (a : A left) (b : A right) : Type
 | at (i : I) : A i {
   | left => a
   | right => b
 }
def path {A : I -> Type} (p : Pi (i : I) -> A i)
  => new Path A (p left) (p right) { | at i => p i }
def infix = {A : Type} (a b : A) : Type => Path (\ i => A) a b
def idp {A : Type} (a : A) : a = a => path (\ i => a)

def pmap {A B : Type} (f : A -> B) {a b : A} (p : a = b)
  : f a = f b => path (\ i => f (p.at i))

def infix ∘ { A B C : Type } ( g : B -> C ) ( f : A -> B ) : A -> C
 => \ x => g (f x)

bind ∘ tighter =

struct Isomorphism { A B : Type } : Type
  | to : A -> B
  | from : B -> A
  | from∘to : Pi (a : A) -> from (to a) = a
  | to∘from : Pi (b : B) -> to (from b) = b

def ident { A : Type } ( a : A ) => a
def refl { A : Type } => new Isomorphism { A } { A } {
  | to => ident
  | from => ident
  | from∘to => idp
  | to∘from => idp
}
