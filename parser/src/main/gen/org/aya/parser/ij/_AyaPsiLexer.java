// Copyright (c) 2020-2022 Tesla (Yinsen) Zhang.
// Use of this source code is governed by the MIT license that can be found in the LICENSE.md file.

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.aya.parser.ij;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.aya.parser.ij.AyaPsiElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AyaPsiLexer.flex</tt>
 */
public class _AyaPsiLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_BLOCK_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 7, 5]
   * Total runtime size is 2464 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<7)|((ch>>5)&0x7f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\14\1\1\3\u0100\1");

  /* The ZZ_CMAP_Y table has 512 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\30\5\1\6\343\5\1\7\12\5\1\10\1\5\1\11\1\5\1\12\56\5\1"+
    "\13\14\5\1\14\252\5\1\15\10\5");

  /* The ZZ_CMAP_A table has 448 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\1\1\3\22\0\1\4\1\5\1\15\4\5\1\7\1\50\1\53\1\103\1\5\1\105"+
    "\1\11\1\104\1\12\11\17\1\14\1\10\1\0\1\44\1\46\1\42\1\106\1\107\6\21\2\5\1"+
    "\76\6\5\1\34\2\5\1\30\1\74\6\5\1\61\1\13\1\63\1\5\1\110\1\0\1\40\1\22\1\73"+
    "\1\100\1\67\1\25\1\31\1\66\1\24\2\5\1\23\1\71\1\16\1\36\1\72\1\101\1\37\1"+
    "\70\1\26\1\20\1\77\1\102\1\65\1\75\1\5\1\55\1\51\1\57\1\5\1\0\5\5\1\6\72\5"+
    "\1\35\2\5\1\32\27\5\1\33\14\5\2\6\46\5\1\45\1\27\1\43\37\5\1\47\15\5\1\41"+
    "\45\5\1\62\1\64\33\5\1\56\1\60\2\5\1\52\1\54\66\5\1\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\1\1\3\1\5"+
    "\1\6\1\1\6\3\1\7\1\3\1\10\1\5\1\3"+
    "\1\11\2\3\1\12\1\13\1\3\1\14\1\3\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\13\3\1\33\1\34"+
    "\1\3\1\35\1\36\3\37\1\40\1\41\1\42\1\43"+
    "\1\3\2\0\1\44\5\3\1\45\12\3\1\46\1\20"+
    "\1\22\1\26\1\47\1\24\1\50\13\3\1\51\2\3"+
    "\1\52\1\53\1\54\1\55\3\43\1\56\1\0\1\57"+
    "\3\3\1\60\7\3\1\61\24\3\1\62\3\56\1\0"+
    "\6\3\1\63\1\64\2\3\1\65\1\66\1\3\1\67"+
    "\10\3\1\70\5\3\1\71\1\72\1\3\1\73\1\0"+
    "\1\74\2\3\1\75\13\3\1\76\7\3\1\0\1\77"+
    "\1\100\1\101\1\102\1\103\1\3\1\104\2\3\1\105"+
    "\2\3\1\106\1\107\1\110\2\3\1\111\1\3\1\112"+
    "\1\3\1\113\1\114\1\3\1\115\1\116\1\117\3\3"+
    "\1\120\2\3\1\121\1\3\1\122\4\3\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u0124\0\u04d9\0\u0124\0\u0124\0\u0522\0\u0124\0\u056b"+
    "\0\u05b4\0\u0124\0\u0124\0\u05fd\0\u0124\0\u0646\0\u0124\0\u068f"+
    "\0\u06d8\0\u0124\0\222\0\u0124\0\u0721\0\u0124\0\222\0\u0124"+
    "\0\u076a\0\u0124\0\u0124\0\u0124\0\u07b3\0\u07fc\0\u0845\0\u088e"+
    "\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\222"+
    "\0\222\0\u0ad6\0\u0124\0\u0124\0\222\0\u0b1f\0\u0b68\0\u0bb1"+
    "\0\222\0\u0bb1\0\u0bfa\0\222\0\u02da\0\u0c43\0\222\0\u0c8c"+
    "\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4"+
    "\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u0124"+
    "\0\222\0\222\0\222\0\222\0\222\0\222\0\u111c\0\u1165"+
    "\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad"+
    "\0\u13f6\0\u0124\0\u143f\0\u1488\0\u0124\0\222\0\222\0\222"+
    "\0\u14d1\0\222\0\u151a\0\u1563\0\u15ac\0\u0124\0\u15f5\0\u163e"+
    "\0\u1687\0\u0124\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d"+
    "\0\u1886\0\u0124\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c"+
    "\0\u1a85\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84"+
    "\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u0124\0\u1e83"+
    "\0\222\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082"+
    "\0\u20cb\0\u0124\0\u0124\0\u2114\0\u215d\0\u0124\0\u0124\0\u21a6"+
    "\0\u0124\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5"+
    "\0\u23ee\0\u0124\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b\0\u0124"+
    "\0\u0124\0\u25a4\0\u0124\0\u25ed\0\u0124\0\u2636\0\u267f\0\u26c8"+
    "\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u2910"+
    "\0\u2959\0\u29a2\0\u29eb\0\u0124\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f"+
    "\0\u2b58\0\u2ba1\0\u2bea\0\u2c33\0\u0124\0\u0124\0\u0124\0\u0124"+
    "\0\u0124\0\u2c7c\0\u0124\0\u2cc5\0\u2d0e\0\u0124\0\u2d57\0\u2da0"+
    "\0\u0124\0\u0124\0\u0124\0\u2de9\0\u2e32\0\u0124\0\u2e7b\0\u0124"+
    "\0\u2ec4\0\u0124\0\u0124\0\u2f0d\0\u0124\0\u0124\0\u0124\0\u2f56"+
    "\0\u2f9f\0\u2fe8\0\u0124\0\u3031\0\u307a\0\u0124\0\u30c3\0\u0124"+
    "\0\u310c\0\u3155\0\u319e\0\u31e7\0\u0124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\3\4\2\5\1\3\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\12\1\15\2\5\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\5\1\24\1\25\1\26"+
    "\1\27\1\30\1\5\1\31\1\32\1\5\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\5\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\5\1\64\1\65\1\66\2\5\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\11\75\1\76\43\75\1\77\33\75"+
    "\113\0\3\4\111\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\32\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\100\1\101\2\100"+
    "\1\0\1\100\1\0\30\100\1\102\1\100\1\0\2\100"+
    "\1\0\1\100\1\0\1\100\1\0\24\100\2\0\3\100"+
    "\5\0\2\5\2\0\1\103\1\5\3\0\1\5\1\0"+
    "\22\5\1\33\5\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\104\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\24\5\2\0\3\5\12\0"+
    "\1\104\112\0\1\12\2\0\1\12\71\0\2\105\2\0"+
    "\7\105\1\106\1\105\1\107\73\105\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\7\5\1\110\14\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\5\5\1\111\24\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\10\5\1\112\13\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\20\5\1\113"+
    "\11\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\7\5\1\114\14\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\115\31\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\11\5\1\116\12\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\6\5\1\117\11\5\1\120\11\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\24\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\6\5"+
    "\1\121\23\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\6\5\1\122\15\5\2\0\3\5\5\0\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\6\5\1\123\23\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\7\5"+
    "\1\124\14\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\6\5\1\27\12\5\1\125\10\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\24\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\32\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\12\5\1\126\4\5\1\127\4\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\32\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\10\5"+
    "\1\130\13\5\2\0\3\5\5\0\3\5\1\0\1\35"+
    "\1\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\24\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\24\5\1\37"+
    "\5\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\24\5\2\0\3\5\51\0\1\131\44\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\132"+
    "\1\5\1\0\1\5\1\133\3\5\1\54\20\5\2\0"+
    "\3\5\11\0\1\134\37\0\1\135\34\0\1\136\7\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\32\5\1\0"+
    "\1\52\1\5\1\0\1\5\1\0\1\5\1\0\24\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\6\5\1\137\23\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\24\5\2\0\3\5\5\0\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\32\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\5\5\1\140\16\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\10\5\1\141\21\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\24\5\2\0\3\5\5\0\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\20\5\1\142\1\5"+
    "\1\143\7\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\2\5\1\144\16\5\1\145\10\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\24\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\20\5\1\146\11\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\24\5\2\0\3\5\5\0\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\32\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\15\5\1\147\6\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\12\5\1\150\17\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\24\5\2\0\3\5\5\0\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\22\5\1\151\7\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\24\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\20\5\1\152\1\5\1\153\7\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\7\5\1\154\14\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\32\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\23\5\1\155\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\156\24\5\2\0\3\5\57\0"+
    "\1\157\42\0\1\160\104\0\3\100\1\0\2\100\1\0"+
    "\1\100\1\0\32\100\1\0\2\100\1\0\1\100\1\0"+
    "\1\100\1\0\24\100\2\0\3\100\1\161\2\162\1\163"+
    "\2\161\1\162\42\161\1\164\37\161\7\0\1\105\3\0"+
    "\1\105\1\0\3\105\1\165\1\0\1\105\2\0\2\105"+
    "\10\0\1\105\56\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\32\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\22\5\1\166\1\5\2\0\3\5\5\0\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\6\5\1\167\23\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\24\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\6\5\1\170\23\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\24\5\2\0\3\5\5\0\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\20\5\1\171\11\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\24\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\10\5\1\172\21\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\24\5\2\0\3\5\5\0\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\5\5\1\173\1\5"+
    "\1\174\22\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\32\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\12\5\1\175\11\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\32\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\5\5"+
    "\1\176\16\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\21\5\1\177\10\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\24\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\13\5"+
    "\1\200\16\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\6\5\1\201\23\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\24\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\13\5"+
    "\1\24\16\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\10\5\1\202\21\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\24\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\20\5"+
    "\1\203\11\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\22\5\1\204\7\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\7\5\1\205\14\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\32\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\7\5\1\206\14\5\2\0\3\5\5\0\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\32\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\20\5\1\207\3\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\10\5\1\210\11\5\1\211\7\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\24\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\21\5"+
    "\1\212\10\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\32\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\20\5\1\213\3\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\10\5"+
    "\1\214\21\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\4\5\1\215\25\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\24\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\6\5"+
    "\1\216\23\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\2\5\1\217\27\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\7\5\1\220\1\5"+
    "\1\221\6\5\1\222\3\5\2\0\3\5\5\0\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\32\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\12\5\1\223\11\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\32\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\7\5\1\224\14\5\2\0\3\5\5\0\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\21\5\1\225\10\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\24\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\10\5\1\226\21\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\24\5\2\0\3\5\5\0\3\5"+
    "\1\0\2\5\1\0\1\5\1\0\7\5\1\227\22\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\24\5"+
    "\2\0\3\5\1\161\3\0\2\161\1\0\102\161\2\0"+
    "\1\162\106\0\1\230\2\231\1\232\2\230\1\231\102\230"+
    "\14\0\1\233\2\0\1\233\1\165\2\233\2\0\1\233"+
    "\12\0\1\233\26\0\1\233\3\0\1\233\4\0\1\233"+
    "\15\0\3\5\1\0\2\5\1\0\1\5\1\0\7\5"+
    "\1\234\22\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\235\31\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\24\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\32\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\10\5\1\236"+
    "\13\5\2\0\3\5\5\0\3\5\1\0\2\5\1\0"+
    "\1\5\1\0\6\5\1\237\23\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\24\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\6\5\1\240"+
    "\23\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\24\5\2\0\3\5\5\0\3\5\1\0\2\5\1\0"+
    "\1\5\1\0\20\5\1\241\11\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\24\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\5\5\1\242"+
    "\13\5\1\243\10\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\22\5\1\244\7\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\32\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\6\5\1\245\15\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\10\5\1\246\13\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\32\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\12\5\1\247\11\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\21\5\1\250\2\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\251\31\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\21\5\1\252\10\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\24\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\6\5"+
    "\1\253\23\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\32\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\7\5\1\254\14\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\32\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\11\5"+
    "\1\255\12\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\2\5\1\256\27\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\24\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\2\5"+
    "\1\257\27\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\32\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\13\5\1\260\10\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\5\5"+
    "\1\261\24\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\32\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\11\5\1\262\5\5\1\263\4\5"+
    "\2\0\3\5\5\0\3\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\264\31\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\21\5\1\265\10\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\32\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\12\5\1\266\11\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\22\5\1\267\7\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\32\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\7\5\1\270\14\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\10\5\1\271\21\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\6\5\1\272\23\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\22\5\1\273\7\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\2\0"+
    "\3\5\1\230\3\0\2\230\1\0\102\230\2\0\1\231"+
    "\122\0\1\274\2\0\1\274\1\0\2\274\2\0\1\274"+
    "\12\0\1\274\26\0\1\274\3\0\1\274\4\0\1\274"+
    "\15\0\3\5\1\0\2\5\1\0\1\5\1\0\10\5"+
    "\1\22\21\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\13\5\1\275\16\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\24\5\2\0\3\5"+
    "\5\0\3\5\1\0\2\5\1\0\1\5\1\0\32\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\7\5"+
    "\1\276\14\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\277\31\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\24\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\32\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\5\5\1\300"+
    "\16\5\2\0\3\5\5\0\3\5\1\0\2\5\1\0"+
    "\1\5\1\0\21\5\1\301\10\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\24\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\5\5\1\302"+
    "\24\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\24\5\2\0\3\5\5\0\3\5\1\0\2\5\1\0"+
    "\1\5\1\0\10\5\1\303\21\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\24\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\2\5\1\304"+
    "\27\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\24\5\2\0\3\5\5\0\3\5\1\0\2\5\1\0"+
    "\1\5\1\0\5\5\1\305\13\5\1\306\10\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\307\31\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\24\5\2\0\3\5\5\0\3\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\310\31\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\24\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\32\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\12\5\1\311"+
    "\11\5\2\0\3\5\5\0\3\5\1\0\2\5\1\0"+
    "\1\5\1\0\32\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\13\5\1\312\10\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\5\5\1\313"+
    "\24\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\24\5\2\0\3\5\5\0\3\5\1\0\2\5\1\0"+
    "\1\5\1\0\32\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\6\5\1\314\15\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\6\5\1\315"+
    "\23\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\24\5\2\0\3\5\5\0\3\5\1\0\2\5\1\0"+
    "\1\5\1\0\22\5\1\316\7\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\24\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\10\5\1\317"+
    "\21\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\24\5\2\0\3\5\5\0\3\5\1\0\2\5\1\0"+
    "\1\5\1\0\32\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\13\5\1\320\10\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\5\5\1\321"+
    "\24\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\24\5\2\0\3\5\5\0\3\5\1\0\2\5\1\0"+
    "\1\5\1\0\10\5\1\322\21\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\24\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\22\5\1\323"+
    "\7\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\24\5\2\0\3\5\14\0\1\324\2\0\1\324\1\0"+
    "\2\324\2\0\1\324\12\0\1\324\26\0\1\324\3\0"+
    "\1\324\4\0\1\324\15\0\3\5\1\0\2\5\1\0"+
    "\1\5\1\0\21\5\1\325\10\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\24\5\2\0\3\5\5\0"+
    "\3\5\1\0\2\5\1\0\1\5\1\0\32\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\7\5\1\326"+
    "\14\5\2\0\3\5\5\0\3\5\1\0\2\5\1\0"+
    "\1\5\1\0\5\5\1\327\13\5\1\330\10\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\10\5\1\331\21\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\5\5\1\32\24\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\32\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\7\5\1\332\14\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\7\5\1\333\14\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\22\5\1\334\7\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\6\5\1\335\23\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\13\5\1\336\16\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\20\5\1\337\3\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\5\5\1\340\24\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\10\5\1\341\21\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\32\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\7\5\1\342\14\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\13\5\1\343\10\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\10\5\1\344\21\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\7\5\1\345\14\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\32\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\7\5\1\346\14\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\7\5\1\347\14\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\22\5\1\350\7\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\4\5\1\351\25\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\2\0"+
    "\3\5\14\0\1\105\2\0\1\105\1\0\2\105\2\0"+
    "\1\105\12\0\1\105\26\0\1\105\3\0\1\105\4\0"+
    "\1\105\15\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\21\5\1\352\10\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\12\5\1\353\11\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\32\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\20\5\1\354\3\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\10\5\1\355\13\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\32\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\7\5\1\356\14\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\7\5\1\357\14\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\21\5\1\360\10\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\10\5\1\361\21\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\5\5\1\362\24\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\7\5\1\363\14\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\32\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\7\5\1\364\14\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\7\5\1\365\14\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\32\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\7\5\1\366\14\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\5\5\1\367\16\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\32\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\20\5\1\370\3\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\22\5\1\371\7\5\1\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\32\5\1\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\11\5\1\372\12\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\12\5\1\373\11\5\2\0"+
    "\3\5\5\0\3\5\1\0\2\5\1\0\1\5\1\0"+
    "\5\5\1\374\24\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\24\5\2\0\3\5\5\0\3\5\1\0"+
    "\2\5\1\0\1\5\1\0\32\5\1\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\7\5\1\375\14\5\2\0"+
    "\3\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12848];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\37\1\1\11\3\1\1\11\20\1\2\11"+
    "\3\1\1\11\3\1\1\11\2\1\1\11\2\0\1\11"+
    "\21\1\6\11\17\1\3\11\1\1\1\11\2\1\1\0"+
    "\43\1\1\11\1\1\1\0\40\1\1\0\27\1\1\0"+
    "\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private boolean isRepl;
  public _AyaPsiLexer(boolean isRepl) {
    this((java.io.Reader)null);
    this.isRepl = isRepl;
  }
  /**
    * Dedicated storage for starting position of some previously successful
    * match
    */
  private int zzPostponedMarkedPos = -1;

  /**
    * Dedicated nested-comment level counter
    */
  private int zzNestedCommentLevel = 0;
  IElementType imbueBlockComment() {
    assert(zzNestedCommentLevel == 0);
    yybegin(YYINITIAL);
    zzStartRead = zzPostponedMarkedPos;
    zzPostponedMarkedPos = -1;
    return AyaParserDefinitionBase.BLOCK_COMMENT;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AyaPsiLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case IN_BLOCK_COMMENT: {
              zzNestedCommentLevel = 0; return imbueBlockComment();
            }  // fall though
            case 254: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 84: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 85: break;
          case 3: 
            { return ID;
            } 
            // fall through
          case 86: break;
          case 4: 
            { return COLON;
            } 
            // fall through
          case 87: break;
          case 5: 
            { return KW_LAMBDA;
            } 
            // fall through
          case 88: break;
          case 6: 
            { return NUMBER;
            } 
            // fall through
          case 89: break;
          case 7: 
            { return KW_ULIFT;
            } 
            // fall through
          case 90: break;
          case 8: 
            { return KW_SIGMA;
            } 
            // fall through
          case 91: break;
          case 9: 
            { return KW_PI;
            } 
            // fall through
          case 92: break;
          case 10: 
            { return KW_FORALL;
            } 
            // fall through
          case 93: break;
          case 11: 
            { return TO;
            } 
            // fall through
          case 94: break;
          case 12: 
            { return LARROW;
            } 
            // fall through
          case 95: break;
          case 13: 
            { return IMPLIES;
            } 
            // fall through
          case 96: break;
          case 14: 
            { return LPAREN;
            } 
            // fall through
          case 97: break;
          case 15: 
            { return BAR;
            } 
            // fall through
          case 98: break;
          case 16: 
            { return LIDIOM;
            } 
            // fall through
          case 99: break;
          case 17: 
            { return RPAREN;
            } 
            // fall through
          case 100: break;
          case 18: 
            { return RIDIOM;
            } 
            // fall through
          case 101: break;
          case 19: 
            { return LBRACE;
            } 
            // fall through
          case 102: break;
          case 20: 
            { return LPARTIAL;
            } 
            // fall through
          case 103: break;
          case 21: 
            { return RBRACE;
            } 
            // fall through
          case 104: break;
          case 22: 
            { return RPARTIAL;
            } 
            // fall through
          case 105: break;
          case 23: 
            { return LARRAY;
            } 
            // fall through
          case 106: break;
          case 24: 
            { return LPATH;
            } 
            // fall through
          case 107: break;
          case 25: 
            { return RARRAY;
            } 
            // fall through
          case 108: break;
          case 26: 
            { return RPATH;
            } 
            // fall through
          case 109: break;
          case 27: 
            { return DOT;
            } 
            // fall through
          case 110: break;
          case 28: 
            { return COMMA;
            } 
            // fall through
          case 111: break;
          case 29: 
            { return AT;
            } 
            // fall through
          case 112: break;
          case 30: 
            { return CALM_FACE;
            } 
            // fall through
          case 113: break;
          case 31: 
            { 
            } 
            // fall through
          case 114: break;
          case 32: 
            { return getTokenStart() == 0 && isRepl ? REPL_COMMAND : ID;
            } 
            // fall through
          case 115: break;
          case 33: 
            { return COLON2;
            } 
            // fall through
          case 116: break;
          case 34: 
            { return DEFINE_AS;
            } 
            // fall through
          case 117: break;
          case 35: 
            { return AyaParserDefinitionBase.LINE_COMMENT;
            } 
            // fall through
          case 118: break;
          case 36: 
            { return STRING;
            } 
            // fall through
          case 119: break;
          case 37: 
            { return KW_IN;
            } 
            // fall through
          case 120: break;
          case 38: 
            { return KW_AS;
            } 
            // fall through
          case 121: break;
          case 39: 
            { yybegin(IN_BLOCK_COMMENT); yypushback(2);
            } 
            // fall through
          case 122: break;
          case 40: 
            { return LGOAL;
            } 
            // fall through
          case 123: break;
          case 41: 
            { return KW_DO;
            } 
            // fall through
          case 124: break;
          case 42: 
            { return SUCHTHAT;
            } 
            // fall through
          case 125: break;
          case 43: 
            { return RGOAL;
            } 
            // fall through
          case 126: break;
          case 44: 
            { if (--zzNestedCommentLevel == 0) return imbueBlockComment();
            } 
            // fall through
          case 127: break;
          case 45: 
            { if (zzNestedCommentLevel++ == 0) zzPostponedMarkedPos = zzStartRead;
            } 
            // fall through
          case 128: break;
          case 46: 
            { return AyaParserDefinitionBase.DOC_COMMENT;
            } 
            // fall through
          case 129: break;
          case 47: 
            { return KW_NEW;
            } 
            // fall through
          case 130: break;
          case 48: 
            { return KW_LET;
            } 
            // fall through
          case 131: break;
          case 49: 
            { return KW_SET;
            } 
            // fall through
          case 132: break;
          case 50: 
            { return KW_DEF;
            } 
            // fall through
          case 133: break;
          case 51: 
            { return KW_FIXL;
            } 
            // fall through
          case 134: break;
          case 52: 
            { return KW_FIXR;
            } 
            // fall through
          case 135: break;
          case 53: 
            { return KW_THIS;
            } 
            // fall through
          case 136: break;
          case 54: 
            { return KW_PROP;
            } 
            // fall through
          case 137: break;
          case 55: 
            { return KW_OPEN;
            } 
            // fall through
          case 138: break;
          case 56: 
            { return KW_PRIM;
            } 
            // fall through
          case 139: break;
          case 57: 
            { return KW_TYPE;
            } 
            // fall through
          case 140: break;
          case 58: 
            { return KW_ISET;
            } 
            // fall through
          case 141: break;
          case 59: 
            { return KW_DATA;
            } 
            // fall through
          case 142: break;
          case 60: 
            { return KW_USING;
            } 
            // fall through
          case 143: break;
          case 61: 
            { return KW_INFIX;
            } 
            // fall through
          case 144: break;
          case 62: 
            { return KW_MATCH;
            } 
            // fall through
          case 145: break;
          case 63: 
            { return KW_LOOSER;
            } 
            // fall through
          case 146: break;
          case 64: 
            { return KW_INLINE;
            } 
            // fall through
          case 147: break;
          case 65: 
            { return KW_INFIXL;
            } 
            // fall through
          case 148: break;
          case 66: 
            { return KW_INFIXR;
            } 
            // fall through
          case 149: break;
          case 67: 
            { return KW_IMPORT;
            } 
            // fall through
          case 150: break;
          case 68: 
            { return KW_OPAQUE;
            } 
            // fall through
          case 151: break;
          case 69: 
            { return KW_HIDING;
            } 
            // fall through
          case 152: break;
          case 70: 
            { return KW_STRUCT;
            } 
            // fall through
          case 153: break;
          case 71: 
            { return KW_MODULE;
            } 
            // fall through
          case 154: break;
          case 72: 
            { return KW_PUBLIC;
            } 
            // fall through
          case 155: break;
          case 73: 
            { return KW_COERCE;
            } 
            // fall through
          case 156: break;
          case 74: 
            { return KW_CODATA;
            } 
            // fall through
          case 157: break;
          case 75: 
            { return KW_TIGHTER;
            } 
            // fall through
          case 158: break;
          case 76: 
            { return KW_OVERLAP;
            } 
            // fall through
          case 159: break;
          case 77: 
            { return KW_EXTENDS;
            } 
            // fall through
          case 160: break;
          case 78: 
            { return KW_EXAMPLE;
            } 
            // fall through
          case 161: break;
          case 79: 
            { return KW_PRIVATE;
            } 
            // fall through
          case 162: break;
          case 80: 
            { return KW_OVERRIDE;
            } 
            // fall through
          case 163: break;
          case 81: 
            { return KW_VARIABLE;
            } 
            // fall through
          case 164: break;
          case 82: 
            { return KW_COMPLETED;
            } 
            // fall through
          case 165: break;
          case 83: 
            { return KW_COUNTEREXAMPLE;
            } 
            // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
